// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/agent/imetric.go

// Package mock_agent is a generated GoMock package.
package mock_agent

import (
	reflect "reflect"

	metric "github.com/NStegura/metrics/internal/clients/metric"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricCli is a mock of MetricCli interface.
type MockMetricCli struct {
	ctrl     *gomock.Controller
	recorder *MockMetricCliMockRecorder
}

// MockMetricCliMockRecorder is the mock recorder for MockMetricCli.
type MockMetricCliMockRecorder struct {
	mock *MockMetricCli
}

// NewMockMetricCli creates a new mock instance.
func NewMockMetricCli(ctrl *gomock.Controller) *MockMetricCli {
	mock := &MockMetricCli{ctrl: ctrl}
	mock.recorder = &MockMetricCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricCli) EXPECT() *MockMetricCliMockRecorder {
	return m.recorder
}

// UpdateMetrics mocks base method.
func (m *MockMetricCli) UpdateMetrics(arg0 []metric.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricCliMockRecorder) UpdateMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricCli)(nil).UpdateMetrics), arg0)
}
